'''
Задача 1 Вспомните какие модули вы уже проходили на курсе.
Создайте файл, в котором вы импортируете встроенные в модуль функции под псевдонимами.
(3-7 строк импорта).
'''

# from decimal import Decimal as D
# from random import randint as rnd
# from math import sqrt as sq
# from sys import argv as arguments
# from fractions import Fraction as F


'''
Задача 0 Проверка ключа на неизменяемость в словаре
'''

# my_dict = {(4, 5, 6): [3, 4, 5]}
# new_dict = {}

# for key, value in my_dict.items():
#     try:
#         hash(value)
#         new_dict[value] = key
#     except:
#         new_dict[str(value)] = key

# print(new_dict)


'''
2.
Создайте модуль с функцией внутри. 
Функция принимает на вход три целых числа: нижнюю и верхнюю границу и количество попыток. 
Внутри генерируется случайное число в указанных границах и пользователь должен угадать его за заданное число попыток. 
Функция выводит подсказки “больше” и “меньше”. 
Если число угадано, возвращается истина, а если попытки исчерпаны - ложь.
'''

# from package_sem_6.module_task2_task3 import func
# # if __name__ == '__main__':  # используется как отладчик для того чтобы не запускалось в других файлах
# func(10, 50, 5)

'''
3.
Улучшаем задачу 2. 
Добавьте возможность запуска функции “угадайки” из модуля в командной строке терминала. 
Строка должна принимать от 1 до 3 аргументов: параметры вызова функции. 
Для преобразования строковых аргументов командной строки в числовые параметры используйте генераторное выражение.
'''

# from sys import argv


# if __name__ == '__main__':
#     min_val, max_val, triers = map(int, argv[1:])   # переводим в Int
#     func(min_val, max_val, triers)

# Здесь также работает программа, что и в task2, только ввод осущствляется не через консоль, а через
# терминал (командную строку), в которой надо набрать команду python seminar_6.py 10 20 5
# где 10, 20, 5 - это min_val, max_val, triers

'''
4. 
Создайте модуль с функцией внутри.
Функция получает на вход загадку, список с возможными вариантами отгадок и количество попыток на угадывание.
Программа возвращает номер попытки, с которой была отгадана загадка или ноль, если попытки исчерпаны.
'''


# from package_sem_6.module_task4_5_6 import puzzle

# if __name__ == '__main__':
#     print(puzzle("Зимой и летом одним цветом", ['ель', 'елка', 'доллар'], 3))

'''
5.
Добавьте в модуль с загадками функцию, которая хранит словарь списков.
Ключ словаря - загадка, значение - список с отгадками.
Функция в цикле вызывает загадывающую функцию, чтобы передать ей все свои загадки.
'''


# from package_sem_6.module_task4_5_6 import puzzle_solut

# if __name__ == '__main__':
#     print(puzzle_solut())

'''
6.
Добавьте в модуль с загадками функцию, которая принимает на вход строку (текст загадки) и
число (номер попытки, с которой она угадана).
Функция формирует словарь с информацией о результатах отгадывания.
Для хранения используйте защищённый словарь уровня модуля.
Отдельно напишите функцию, которая выводит результаты угадывания из защищённого словаря
в удобном для чтения виде.
Для формирования результатов используйте генераторное выражение.
'''


# import random
# from package_sem_6.module_task4_5_6 import puzzle_solver, show_rezult

# if __name__ == '__main__':
#     puzzle_solver('Зимой и летом одним цветом', random.randint(3,6))
#     puzzle_solver('Висит груша - нельзя скушать', random.randint(3,6))
#     show_rezult()


'''
7.
Создайте модуль и напишите в нём функцию, которая получает на вход дату в формате DD.MM.YYYY
Функция возвращает истину, если дата может существовать или ложь, если такая дата невозможна.
Для простоты договоримся, что год может быть в диапазоне [1, 9999].
Весь период (1 января 1 года - 31 декабря 9999 года) действует Григорианский календарь.
Проверку года на високосность вынести в отдельную защищённую функцию.
'''


from package_sem_6.module_task_7 import calend

if __name__ == '__main__':
    print(calend('12.12.2016'))
    print(calend('29.02.2016'))